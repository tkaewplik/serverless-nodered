org: tkaewplik
app: aws-node-express-api
service: aws-node-express-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
    DYNAMODB_SENSOR_TABLE: ${self:service}-sensor-2-${sls:stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: 
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: 
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-sensor-2-${sls:stage}

functions:
  createCustomer:
    handler: createCustomer.createCustomer
    events:
      - httpApi:
          path: /create
          method: post
  putSensorData:
    handler: putSensorData.putSensorData
    events:
      - alexaSkill
      - httpApi:
          path: /sensor
          method: post
  getSensorData:
    handler: getSensorData.getSensorData
    events:
      - alexaSkill
      - httpApi:
          path: /sensor
          method: get
  getCustomers:
    handler: getCustomers.getCustomers
    events: 
      - httpApi:
          path: /get
          method: get
  getWebpage:
    handler: getCustomers.getWebpage
    events: 
      - httpApi:
          path: /web
          method: get
  api:
    handler: handler.handler
    events:
      - httpApi: '*'
  
# todo: use custom!
custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    migrate: true
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
    
    seed:
      test:
        sources:
          - table: ${self:service}-sensor-2-${sls:stage}
            rawsources: [./seed/fake-sensor-data.json]


resources:
  Resources:
  
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:service}-customerTable-${sls:stage}

    SensorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: sensor_id
            AttributeType: N
          - AttributeName: sensor_timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: sensor_id
            KeyType: HASH
          - AttributeName: sensor_timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:service}-sensor-2-${sls:stage}
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-local-dev-server
